import term.ui as tui
import term
import os

enum Menu {
    nothing
    find_in_file
    find_in_workspace
    exit
    save_as
    open_file
    open_workspace
    settings
}

struct App {
mut:
    tui &tui.Context = 0
    scroll_offset int
    file []string
    filename string
    is_saved bool
    cursor_x int = 1
    cursor_y int = 1
    tab string = "    " // four spaces (todo: customisable via settings)
}

fn (mut app App) panic(err string) {
    app.file = [
        "Error: $err"
    ]
}

fn (mut app App) scroll_up() {
    if app.scroll_offset < (app.file.len - app.tui.window_height) {
    //if app.scroll_offset < (app.file.len - 1) {
        app.scroll_offset++
        app.cursor_y--
    }
}

fn (mut app App) scroll_down() {
    if app.scroll_offset > 0 {
        app.scroll_offset--
        app.cursor_y++
    }
}

fn (mut app App) lowest_rendered_line_no() int {
    return app.scroll_offset + app.tui.window_height
}

fn (mut app App) highest_rendered_line_no() int {
    return app.scroll_offset + 1
}

fn is_navigation_key(kc tui.KeyCode) bool {
    return kc in [.up, .down, .left, .right, .page_up, .page_down, .end, .home]
}

fn (mut app App) handle_navigation_key(kc tui.KeyCode) {
    match kc {
        .up {
            if app.get_cursor_line_abs() > 0 {app.cursor_y--}
            if app.get_cursor_line_abs() < app.highest_rendered_line_no()-1 {
                app.scroll_down()
            }
        }
        .down {
            if app.get_cursor_line_abs() < app.file.len-1 {app.cursor_y++}
            if app.get_cursor_line_abs() > app.lowest_rendered_line_no()-1 {
                app.scroll_up()
            }
        }
        .left {
            // move left. if at end, wrap to line above
            if app.cursor_x > 1 {app.cursor_x--}
            else {
                if app.get_cursor_line_abs() > 0 {
                    app.handle_navigation_key(.up)
                    app.handle_navigation_key(.end)
                }
            }
        }
        .right {
            // move right. if at end, wrap to line below
            if app.cursor_x < app.current_line().len+1 {app.cursor_x++}
            else {
                if app.get_cursor_line_abs() < app.file.len-1 {
                    app.handle_navigation_key(.down)
                    app.handle_navigation_key(.home)
                }
            }
        }
        .end {
            app.cursor_x = app.current_line().len+1
        }
        .home {
            app.cursor_x = 1
        }
        .page_down {
            for _ in 0..app.tui.window_height {
                app.handle_navigation_key(.down)
            }
        }
        .page_up {
            for _ in 0..app.tui.window_height {
                app.handle_navigation_key(.up)
            }
        }
        else {
            app.panic("No impl for navigation key $kc")
        }
    }
}

fn (mut app App) delete_char(x int) {
    mut parts := split(app.current_line(), x)
    if x > 1 {
        parts[0] = parts[0][..parts[0].len - 1]
    } else {
        parts[1] = parts[1][1..]
    }
    app.file[app.get_cursor_line_abs()] = join([parts[0], parts[1]])
}

fn is_editing_key(kc tui.KeyCode) bool {
    return kc in [.backspace, .delete]
}

/*
mut parts := split(app.current_line(), app.cursor_x)
if app.cursor_x == 1 && app.cursor_y == 1 {
    return
}
if parts[0] != "" {
    parts[0] = parts[0][..parts[0].len - 1]
    app.file[app.get_cursor_line_abs()] = join([parts[0], parts[1]])
} else {
    app.file[app.get_cursor_line_abs()-1] = app.file[app.get_cursor_line_abs()-1] + app.current_line()
    app.file.delete(app.get_cursor_line_abs())
}
app.handle_navigation_key(.left)
*/

fn (mut app App) handle_editing_key(kc tui.KeyCode) {
    match kc {
        .backspace {
            // if we're at the start, don't delete anything
            if app.cursor_x == 1 && app.cursor_y == 1 {
                return
            }
            // if we're at the start of a line, stick this line to the end of the
            // previous one and delete
            if app.cursor_x == 1 {
                // += is fucked on array items
                app.file[app.get_cursor_line_abs() - 1] = app.file[app.get_cursor_line_abs() - 1] + app.current_line()
                moved_line_len := app.current_line().len
                app.file.delete(app.get_cursor_line_abs())
                for _ in 0..moved_line_len+1 {
                    app.handle_navigation_key(.left)
                }
            } else {
                // delete the current char
                app.delete_char(app.cursor_x)
                app.handle_navigation_key(.left)
            }
        }
        .delete {
            // todo: move stuff from backspace to a dedicated function for deleting the char at a certain pos. then keep the
            // start/end and cursor move logic here
            if app.get_cursor_line_abs()+1 >= app.file.len && app.cursor_x > app.current_line().len {
                return
            }
            if app.cursor_x > app.current_line().len {
                app.file[app.get_cursor_line_abs() + 1] = app.current_line() + app.file[app.get_cursor_line_abs() + 1]
                moved_line_len := app.current_line().len
                app.file.delete(app.get_cursor_line_abs())
                for _ in 0..moved_line_len+1 {
                    //app.handle_navigation_key(.right)
                }
            } else {
                app.delete_char(app.cursor_x+1)
            }
        }
        else {
            app.panic("No impl for editing key $kc")
        }
    }
}

fn (mut app App) current_line() string {
    return app.file[app.get_cursor_line_abs()]
}

fn (mut app App) current_char() string {
    if app.cursor_x >= app.current_line().len {
        return ""
    }
    return app.current_line()[app.cursor_x].str()
}

fn join(parts []string) string {
    mut out := ""
    for part in parts {
        out += part
    }
    return out
}

fn split(str string, pos int) []string {
    mut start := ""
    mut end := str
    if pos != 0 {
        start = str[..pos-1]
        end = str[pos-1..]
    }
    return [start, end]
}

fn insert(str string, pos int, new string) string {
    parts := split(str, pos)
    return join([parts[0], new, parts[1]])
}

// convert a keycode to a string
fn (mut app App) key_str(kc tui.KeyCode) string {
    return match kc {
        .space {" "}
        .exclamation {"!"}
        ._1 {"1"}
        ._2 {"2"}
        ._3 {"3"}
        ._4 {"4"}
        ._5 {"5"}
        ._6 {"6"}
        ._7 {"7"}
        ._8 {"8"}
        ._9 {"9"}
        ._0 {"0"}
        .underscore {"_"}
        .single_quote{"'"}
        .double_quote{'"'}
        .question_mark{"?"}
        .tab{app.tab}
        .colon{":"}
        else {kc.str()}
    }
}

fn (mut app App) process_keydown(e &tui.Event) {
    if e.code == .escape {
        exit(0)
    } else if is_navigation_key(e.code) {
        app.handle_navigation_key(e.code)
    } else if is_editing_key(e.code) {
        app.handle_editing_key(e.code)
        app.is_saved = false
    } else {
        app.is_saved = false
        if e.code == .enter {
            mut line_no := app.get_cursor_line_abs()
            parts := split(app.current_line(), app.cursor_x)
            app.file[line_no] = parts[0]
            app.file.insert(line_no + 1, parts[1])
            app.handle_navigation_key(.right)
        } else {
            mut char := app.key_str(e.code)
            if e.modifiers == 1 {
                // shift
                char = char.to_upper()
            }
            
            mut line_no := app.get_cursor_line_abs()
            // insert char at the cursor
            app.file[line_no] = insert(app.current_line(), app.cursor_x, char)
            for _ in 0..char.len {
                // if it's a tab then char could be four spaces
                app.handle_navigation_key(.right)
            }
        }
    }
    // todo:
    //   -> menus n shit (kb shortcuts)
    
}

fn process_event(e &tui.Event, x voidptr) {
    mut app := &App(x)
    if e.typ == .mouse_scroll {
        // scrolling
        if e.direction == .up {
            app.scroll_up()
        } else if e.direction == .down {
            app.scroll_down()
        }
    }
    else if e.typ == .key_down {
        app.process_keydown(e)        
    } else if e.typ == .mouse_down {
        app.cursor_x = e.x
        app.cursor_y = e.y
    } else if e.typ == .mouse_drag {
        // todo: drags
        //   -> scroll bar
        //   -> text move
        //   -> tab reposition
        //   -> highlighting
    }
}

// get the cursor's line no in the file
fn (app App) get_cursor_line_abs() int {
    return app.cursor_y + app.scroll_offset - 1
}

fn (mut app App) set_cursor_to_line_end() {
    line_length := app.current_line().len
    //app.tui.set_window_title("Line $cursor_line_no | Length $line_length")
    // just set cursor_x to the max() ?
    // TODO: this doesn't work for tabs
    if line_length < app.cursor_x {
        app.cursor_x = line_length + 1
    }
}

fn (mut app App) debug_window_title() {
    app.tui.set_window_title("Highest: ${app.highest_rendered_line_no()} | Lowest: ${app.lowest_rendered_line_no()} | Cursor line: ${app.get_cursor_line_abs()} | Cursor pos: (${app.cursor_x}, ${app.cursor_y}) | Char under cursor: ${app.current_char()}")
}

fn process_frame(x voidptr) {
    mut app := &App(x)

    // load file
    if app.file == []{} {
        app.file = os.read_lines(app.filename) or {
            app.panic(err)
            return
        }
        app.is_saved = true
    }

    app.tui.clear()
    //app.tui.set_bg_color(r: 69, g: 0, b: 69)
    //app.tui.set_window_title("size: ${app.tui.window_width}x${app.tui.window_height} line: ${app.scroll_offset}")
    app.tui.set_window_title(app.filename + if app.is_saved {""} else {" *"})
    file_line_count := app.file.len
    
    // line in the _file_ which the cursor is on
    for i in 0..app.tui.window_height {
        this_line_no := app.scroll_offset + i
        if this_line_no >= file_line_count {
            break
        }
        mut this_line := app.file[this_line_no]
        if this_line.len > app.tui.window_width {
            this_line = this_line[..app.tui.window_width]
        }

        app.debug_window_title()

        //app.tui.draw_text(0, i+1, "${this_line_no + 1}   $this_line")
        app.tui.draw_text(0, i+1, "$this_line")

    }

    app.set_cursor_to_line_end()

    // cursor gets moved around by painting n stuff (which is annoying - should termui functions replace the cursor after
    // doing their stuff??) Anyway, this means that if we want to manually reposition the cursor we have to do it AFTER
    // painting etc
    app.tui.set_cursor_position(app.cursor_x, app.cursor_y)

    // if we're out of the screen, hide cursor
    if app.cursor_y <= 0 || app.cursor_y > app.tui.window_height {
        term.hide_cursor()
    } else {
        term.show_cursor()
    }

    app.tui.reset()
    app.tui.flush()
}

fn main() {
    mut app := &App{
        filename: "main.v"
    }
    app.tui = tui.init(
        user_data: app,
        event_fn: process_event,
        frame_fn: process_frame,
    )
    app.tui.run()?
}
